#

# This is very similar to linux-armv7 from ArchLinuxARM repo. There are a few differences
# other than the obvious source (xilinx instead of upstream) and config.
# * vadj-ctrl.patch
# * We use uImage rather than zImage
# * Our ramdisk is also packaged with uboot (uramdisk)
# * We only install the device tree file (.dtb) that we need
# * PATH fix for cross-compilation

pkgbase=linux-nacs-git
_kernelname=-nacs
_desc="NaCs Lab"
_kernelver=4.19.0
_srcname=linux-xlnx

pkgver=2019.2.01
pkgrel=1
arch=('armv7h')
url="https://github.com/Xilinx/linux-xlnx"
license=('GPL2')
makedepends=('xmlto' 'docbook-xsl' 'kmod' 'inetutils' 'bc' 'git' 'uboot-tools')
options=('!strip')
source=("git://github.com/Xilinx/linux-xlnx#tag=xilinx-v2019.2.01"
        'vadj-ctrl.patch'
        'linux.preset'
        '60-linux.hook'
        '90-linux.hook'
        mkuramdisk.sh
        'config')
md5sums=('SKIP'
         '8cc338fed978d4864513f84c3b971629'
         '68fee8a88c12f58ac1e17f6c75124a59'
         'ce6c81ad1ad1f8b333fd6077d47abdaf'
         '05939f15b9b454aaebd696395a0e3d8f'
         'ceb7f4f0bcd63a4311174a576c5f3051'
         'd2636ec5b5ef49e68ed068b1b2dd7c66')

pkgver() {
  cd "${srcdir}/${_srcname}"

  git describe | sed -e 's/^[^0-9]*//' -e 's/-/.0./' -e 's/-/./g'
}

prepare() {
  cd ${_srcname}

  patch -Np1 < ../vadj-ctrl.patch

  cat "${srcdir}/config" > ./.config

  # add pkgrel to extraversion
  sed -ri "s|^(EXTRAVERSION =)(.*)|\1 \2-${pkgrel}|" Makefile

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh

  rm -rf "${srcdir}/bin"
  mkdir -p "${srcdir}/bin"
  for c in cc c++ gcc g++; do
    cat > "${srcdir}/bin/${c}" <<EOF
#!/bin/bash
exec ${CHOST}-${c} -Wl,-rpath-link,/usr/${CHOST}/lib "\$@"
EOF
    chmod +x "${srcdir}/bin/${c}"
  done
}

build() {
  cd "${srcdir}/${_srcname}"

  run_config=0

  export MAKEFLAGS+=' ARCH=arm LOCALVERSION='
  export PATH="${srcdir}/bin:${PATH}"
  if ((run_config)); then
      # For running xconfig
      rm "${srcdir}/bin/"*
  fi
  # get kernel version
  make ${MAKEFLAGS} prepare

  if ((run_config)); then
      # load configuration
      # Configure the kernel. Replace the line below with one of your choice.
      # make menuconfig # CLI menu for configuration
      # make nconfig # new CLI menu for configuration
      make xconfig # X-based configuration
      # make oldconfig # using old config from previous kernel version
      # ... or manually edit .config

      # Copy back our configuration (use with new kernel version)
      cp ./.config "${startdir}/config"

      ####################
      # stop here
      # this is useful to configure the kernel
      msg "Stopping build"
      return 1
      ####################
  fi

  # yes "" | make config

  # build!
  make ${MAKEFLAGS} UIMAGE_LOADADDR=0x8000 uImage modules zynq-zc702.dtb
}

_package() {
  pkgdesc="The Linux Kernel and modules - ${_desc}"
  depends=('coreutils' 'linux-firmware' 'kmod' 'mkinitcpio>=0.7' 'uboot-zc70x')
  optdepends=('crda: to set the correct wireless channels of your country')
  provides=('kernel26' "linux=${pkgver}")
  backup=("etc/mkinitcpio.d/${pkgbase}.preset")
  conflicts=('linux')
  install=linux-nacs.install

  cd "${srcdir}/${_srcname}"

  export MAKEFLAGS+=' ARCH=arm LOCALVERSION='
  export PATH="${srcdir}/bin:${PATH}"
  KARCH=arm

  # get kernel version
  _kernver="$(make ${MAKEFLAGS} kernelrelease)"
  _basekernel=${_kernver%%-*}
  _basekernel=${_basekernel%.*}

  mkdir -p "${pkgdir}"/{boot,usr/lib/{modules,$pkgbase}}
  make INSTALL_MOD_PATH="${pkgdir}/usr" modules_install
  # make INSTALL_DTBS_PATH="${pkgdir}/boot/dtbs" dtbs_install
  cp arch/$KARCH/boot/dts/zynq-zc702.dtb "${pkgdir}/boot/devicetree.dtb"
  cp arch/$KARCH/boot/uImage "${pkgdir}/boot/uImage"

  # make room for external modules
  local _extramodules="extramodules-${_basekernel}${_kernelname}"
  ln -s "../${_extramodules}" "${pkgdir}/usr/lib/modules/${_kernver}/extramodules"

  # add real version for building modules and running depmod from hook
  echo "${_kernver}" |
    install -Dm644 /dev/stdin "${pkgdir}/usr/lib/modules/${_extramodules}/version"

  # remove build and source links
  rm "${pkgdir}"/usr/lib/modules/${_kernver}/{source,build}

  # now we call depmod...
  depmod -b "${pkgdir}/usr" -F System.map "${_kernver}"

  install -Dm755 ../mkuramdisk.sh "${pkgdir}/usr/lib/$pkgbase/mkuramdisk.sh"

  # sed expression for following substitutions
  local _subst="
    s|%PKGBASE%|${pkgbase}|g
    s|%KERNVER%|${_kernver}|g
    s|%EXTRAMODULES%|${_extramodules}|g
  "

  # install mkinitcpio preset file
  sed "${_subst}" ../linux.preset |
    install -Dm644 /dev/stdin "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"

  # install pacman hooks
  sed "${_subst}" ../60-linux.hook |
    install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/60-${pkgbase}.hook"
  sed "${_subst}" ../90-linux.hook |
    install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/90-${pkgbase}.hook"
}

_package-headers() {
  pkgdesc="Header files and scripts for building modules for linux kernel - ${_desc}"
  provides=("linux-headers=${pkgver}")
  conflicts=('linux-headers')

  export MAKEFLAGS+=' ARCH=arm LOCALVERSION='
  export PATH="${srcdir}/bin:${PATH}"
  KARCH=arm

  cd ${_srcname}
  local _builddir="${pkgdir}/usr/lib/modules/${_kernver}/build"

  install -Dt "${_builddir}" -m644 Makefile .config Module.symvers
  install -Dt "${_builddir}/kernel" -m644 kernel/Makefile

  mkdir "${_builddir}/.tmp_versions"

  cp -t "${_builddir}" -a include scripts

  install -Dt "${_builddir}/arch/${KARCH}" -m644 arch/${KARCH}/Makefile
  install -Dt "${_builddir}/arch/${KARCH}/kernel" -m644 arch/${KARCH}/kernel/asm-offsets.s arch/$KARCH/kernel/module.lds

  cp -t "${_builddir}/arch/${KARCH}" -a arch/${KARCH}/include
  for i in dove exynos omap2; do
    mkdir -p "${_builddir}/arch/${KARCH}/mach-${i}"
    cp -t "${_builddir}/arch/${KARCH}/mach-${i}" -a arch/$KARCH/mach-${i}/include
  done
  for i in omap orion samsung versatile; do
    mkdir -p "${_builddir}/arch/${KARCH}/plat-${i}"
    cp -t "${_builddir}/arch/${KARCH}/plat-${i}" -a arch/$KARCH/plat-${i}/include
  done

  install -Dt "${_builddir}/drivers/md" -m644 drivers/md/*.h
  install -Dt "${_builddir}/net/mac80211" -m644 net/mac80211/*.h

  # http://bugs.archlinux.org/task/13146
  install -Dt "${_builddir}/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # http://bugs.archlinux.org/task/20402
  install -Dt "${_builddir}/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "${_builddir}/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "${_builddir}/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # add xfs and shmem for aufs building
  mkdir -p "${_builddir}"/{fs/xfs,mm}

  # copy in Kconfig files
  find . -name Kconfig\* -exec install -Dm644 {} "${_builddir}/{}" \;

  # remove unneeded architectures
  local _arch
  for _arch in "${_builddir}"/arch/*/; do
    [[ ${_arch} == */${KARCH}/ ]] && continue
    rm -r "${_arch}"
  done

  # remove files already in linux-docs package
  rm -r "${_builddir}/Documentation"

  # remove now broken symlinks
  find -L "${_builddir}" -type l -printf 'Removing %P\n' -delete

  # Fix permissions
  chmod -R u=rwX,go=rX "${_builddir}"

  # strip scripts directory
  local _binary _strip
  while read -rd '' _binary; do
    case "$(file -bi "${_binary}")" in
      *application/x-sharedlib*)  _strip="${STRIP_SHARED}"   ;; # Libraries (.so)
      *application/x-archive*)    _strip="${STRIP_STATIC}"   ;; # Libraries (.a)
      *application/x-executable*) _strip="${STRIP_BINARIES}" ;; # Binaries
      *) continue ;;
    esac
    ${CROSS_COMPILE}strip ${_strip} "${_binary}"
  done < <(find "${_builddir}/scripts" -type f -perm -u+w -print0 2>/dev/null)
}

pkgname=("${pkgbase}" "${pkgbase}-headers")
for _p in ${pkgname[@]}; do
  eval "package_${_p}() {
    _package${_p#${pkgbase}}
  }"
done
