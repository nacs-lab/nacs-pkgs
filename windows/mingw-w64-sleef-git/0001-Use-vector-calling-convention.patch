From fe01322526991bdc5fc37ebdac4bbc5871c05cde Mon Sep 17 00:00:00 2001
From: Yichao Yu <yyc1992@gmail.com>
Date: Sun, 24 Feb 2019 21:03:18 -0500
Subject: [PATCH 1/2] Use vector calling convention

---
 src/arch/helperavx.h          |  7 +++++++
 src/arch/helperavx2.h         |  7 +++++++
 src/arch/helperavx2_128.h     |  7 +++++++
 src/arch/helperavx512f.h      |  7 +++++++
 src/arch/helperpurec.h        | 18 ++++++++++++++++++
 src/arch/helperpurec_scalar.h |  4 ++++
 src/arch/helpersse2.h         |  7 +++++++
 src/common/misc.h             |  2 +-
 src/libm/mkalias.c            | 20 +++++++++++++++-----
 src/libm/mkrename.c           |  2 +-
 src/libm/sleefsimddp.c        | 10 +++++-----
 src/libm/sleefsimdsp.c        |  8 ++++----
 12 files changed, 83 insertions(+), 16 deletions(-)

diff --git a/src/arch/helperavx.h b/src/arch/helperavx.h
index e33a0e7..5de88ca 100644
--- a/src/arch/helperavx.h
+++ b/src/arch/helperavx.h
@@ -49,6 +49,13 @@
 #include "misc.h"
 #endif // #if !defined(SLEEF_GENHEADER)
 
+#define SUFFIX_D1 "@@32"
+#define SUFFIX_D2 "@@64"
+#define SUFFIX_D3 "@@96"
+#define SUFFIX_F1 "@@32"
+#define SUFFIX_F2 "@@64"
+#define SUFFIX_F3 "@@96"
+
 typedef __m256i vmask;
 typedef __m256i vopmask;
 
diff --git a/src/arch/helperavx2.h b/src/arch/helperavx2.h
index 47fcdc6..be1abcb 100644
--- a/src/arch/helperavx2.h
+++ b/src/arch/helperavx2.h
@@ -47,6 +47,13 @@
 #include "misc.h"
 #endif // #if !defined(SLEEF_GENHEADER)
 
+#define SUFFIX_D1 "@@32"
+#define SUFFIX_D2 "@@64"
+#define SUFFIX_D3 "@@96"
+#define SUFFIX_F1 "@@32"
+#define SUFFIX_F2 "@@64"
+#define SUFFIX_F3 "@@96"
+
 typedef __m256i vmask;
 typedef __m256i vopmask;
 
diff --git a/src/arch/helperavx2_128.h b/src/arch/helperavx2_128.h
index 5233db1..c878cd5 100644
--- a/src/arch/helperavx2_128.h
+++ b/src/arch/helperavx2_128.h
@@ -47,6 +47,13 @@
 #include "misc.h"
 #endif // #if !defined(SLEEF_GENHEADER)
 
+#define SUFFIX_D1 "@@16"
+#define SUFFIX_D2 "@@32"
+#define SUFFIX_D3 "@@48"
+#define SUFFIX_F1 "@@16"
+#define SUFFIX_F2 "@@32"
+#define SUFFIX_F3 "@@48"
+
 typedef __m128i vmask;
 typedef __m128i vopmask;
 
diff --git a/src/arch/helperavx512f.h b/src/arch/helperavx512f.h
index b98f400..f3ffbda 100644
--- a/src/arch/helperavx512f.h
+++ b/src/arch/helperavx512f.h
@@ -50,6 +50,13 @@
 #include "misc.h"
 #endif // #if !defined(SLEEF_GENHEADER)
 
+#define SUFFIX_D1 "@@64"
+#define SUFFIX_D2 "@@128"
+#define SUFFIX_D3 "@@192"
+#define SUFFIX_F1 "@@64"
+#define SUFFIX_F2 "@@128"
+#define SUFFIX_F3 "@@192"
+
 typedef __m512i vmask;
 typedef __mmask16 vopmask;
 
diff --git a/src/arch/helperpurec.h b/src/arch/helperpurec.h
index fc5ed8b..b28e7af 100644
--- a/src/arch/helperpurec.h
+++ b/src/arch/helperpurec.h
@@ -31,6 +31,24 @@
 #define DFTPRIORITY LOG2VECTLENDP
 #define ISANAME "Pure C Array"
 
+#if CONFIG == 1
+#  define SUFFIX_D1 "@@8"
+#  define SUFFIX_D2 "@@16"
+#  define SUFFIX_D3 "@@24"
+#  define SUFFIX_F1 "@@8"
+#  define SUFFIX_F2 "@@16"
+#  define SUFFIX_F3 "@@24"
+#elseif CONFIG == 2
+#  define SUFFIX_D1 "@@16"
+#  define SUFFIX_D2 "@@32"
+#  define SUFFIX_D3 "@@48"
+#  define SUFFIX_F1 "@@16"
+#  define SUFFIX_F2 "@@32"
+#  define SUFFIX_F3 "@@48"
+#else
+#  error CONFIG out of range
+#endif
+
 typedef union {
   uint32_t u[VECTLENDP*2];
   uint64_t x[VECTLENDP];
diff --git a/src/arch/helperpurec_scalar.h b/src/arch/helperpurec_scalar.h
index d8b9c84..9b5626b 100644
--- a/src/arch/helperpurec_scalar.h
+++ b/src/arch/helperpurec_scalar.h
@@ -98,6 +98,10 @@
 
 #define DFTPRIORITY LOG2VECTLENDP
 
+#ifdef ENABLE_ALIAS
+#  undef ENABLE_ALIAS
+#endif
+
 typedef uint64_t vmask;
 typedef uint32_t vopmask;
 typedef double vdouble;
diff --git a/src/arch/helpersse2.h b/src/arch/helpersse2.h
index 833f5f9..0d3c23b 100644
--- a/src/arch/helpersse2.h
+++ b/src/arch/helpersse2.h
@@ -53,6 +53,13 @@
 #include "misc.h"
 #endif // #if !defined(SLEEF_GENHEADER)
 
+#define SUFFIX_D1 "@@16"
+#define SUFFIX_D2 "@@32"
+#define SUFFIX_D3 "@@48"
+#define SUFFIX_F1 "@@16"
+#define SUFFIX_F2 "@@32"
+#define SUFFIX_F3 "@@48"
+
 typedef __m128i vmask;
 typedef __m128i vopmask;
 
diff --git a/src/common/misc.h b/src/common/misc.h
index 5d7badd..35372cb 100644
--- a/src/common/misc.h
+++ b/src/common/misc.h
@@ -297,7 +297,7 @@ typedef struct {
 #ifdef ENABLE_AAVPCS
 #define VECTOR_CC __attribute__((aarch64_vector_pcs))
 #else
-#define VECTOR_CC
+#define VECTOR_CC __attribute__((vectorcall))
 #endif
 
 //
diff --git a/src/libm/mkalias.c b/src/libm/mkalias.c
index 633786d..cf6d736 100644
--- a/src/libm/mkalias.c
+++ b/src/libm/mkalias.c
@@ -25,7 +25,7 @@ int main(int argc, char **argv) {
   int genAliasVectorABI = (mangledisa[0] != '-');
   char *isaname = argc == 6 ? argv[5] : "";
 
-  char * vectorcc="";
+  char * vectorcc=" __attribute__((vectorcall))";
 #ifdef ENABLE_AAVPCS
   if (strcmp(isaname, "advsimd") == 0)
     vectorcc =" __attribute__((aarch64_vector_pcs))";
@@ -39,6 +39,7 @@ int main(int argc, char **argv) {
   static char *typeSpecS[] = { "", "f" };
   static char *typeSpec[] = { "d", "f" };
   static char *vparameterStr[9] = { "v", "vv", "", "vv", "v", "vvv", "", "", "" };
+  int argSize[] = {2, 4, 2, fptype ? 4 : 3, 2, 6, 2, 0, 0};
 
   static char returnType[9][1000];
   static char argType0[9][1000];
@@ -87,11 +88,19 @@ int main(int argc, char **argv) {
     for(int i=0;funcList[i].name != NULL;i++) {
       if (fptype == 0 && (funcList[i].flags & 2) != 0) continue;
       if (funcList[i].ulp >= 0) {
-	printf("EXPORT CONST %s Sleef_%s%s%d_u%02d(%s) __attribute__((alias(\"Sleef_%s%s%d_u%02d%s\"))) %s;\n",
+	printf("EXPORT CONST %s Sleef_%s%s%d_u%02d(%s) __attribute__((alias(\"\\01Sleef_%s%s%d_u%02d%s@@%d\"))) %s;\n",
 	       returnType[funcList[i].funcType],
 	       funcList[i].name, typeSpec[fptype], vw, funcList[i].ulp,
 	       argType0[funcList[i].funcType],
-	       funcList[i].name, typeSpec[fptype], vw, funcList[i].ulp, isaname, vectorcc
+	       funcList[i].name, typeSpec[fptype], vw, funcList[i].ulp, isaname,
+	       vw * (2 - fptype) * 2 * argSize[funcList[i].funcType], vectorcc
+	       );
+      } else if (funcList[i].funcType == 7 || funcList[i].funcType == 8) {
+	printf("EXPORT CONST %s Sleef_%s%s%d(%s) __attribute__((alias(\"Sleef_%s%s%d_%s\")));\n",
+	       returnType[funcList[i].funcType],
+	       funcList[i].name, typeSpec[fptype], vw,
+	       argType0[funcList[i].funcType],
+	       funcList[i].name, typeSpec[fptype], vw, isaname
 	       );
 	if (genAliasVectorABI && vparameterStr[funcList[i].funcType] != NULL) {
 	  printf("EXPORT CONST VECTOR_CC %s _ZGV%sN%d%s_Sleef_%s%s_u%02d(%s) __attribute__((alias(\"Sleef_%s%s%d_u%02d%s\")))%s;\n",
@@ -102,11 +111,12 @@ int main(int argc, char **argv) {
 		 );
 	}
       } else {
-	printf("EXPORT CONST %s Sleef_%s%s%d(%s) __attribute__((alias(\"Sleef_%s%s%d_%s\"))) %s;\n",
+	printf("EXPORT CONST %s Sleef_%s%s%d(%s) __attribute__((alias(\"\\01Sleef_%s%s%d_%s@@%d\"))) %s;\n",
 	       returnType[funcList[i].funcType],
 	       funcList[i].name, typeSpec[fptype], vw,
 	       argType0[funcList[i].funcType],
-	       funcList[i].name, typeSpec[fptype], vw, isaname, vectorcc
+	       funcList[i].name, typeSpec[fptype], vw, isaname,
+	       vw * (2 - fptype) * 2 * argSize[funcList[i].funcType], vectorcc
 	       );
 	if (genAliasVectorABI && vparameterStr[funcList[i].funcType] != NULL) {
 	  printf("EXPORT CONST VECTOR_CC %s _ZGV%sN%d%s_Sleef_%s%s(%s) __attribute__((alias(\"Sleef_%s%s%d_%s\")))%s;\n",
diff --git a/src/libm/mkrename.c b/src/libm/mkrename.c
index edae03c..a1a7f7c 100644
--- a/src/libm/mkrename.c
+++ b/src/libm/mkrename.c
@@ -148,7 +148,7 @@ int main(int argc, char **argv) {
     if (strcmp(isaname, "sve") == 0)
       wdp = wsp = "x";
 
-    char * vectorcc = "";
+    char * vectorcc = " __attribute__((vectorcall))";
 #ifdef ENABLE_AAVPCS
     if (strcmp(isaname, "advsimd") == 0)
       vectorcc =" __attribute__((aarch64_vector_pcs))";
diff --git a/src/libm/sleefsimddp.c b/src/libm/sleefsimddp.c
index e531495..ddc98bf 100644
--- a/src/libm/sleefsimddp.c
+++ b/src/libm/sleefsimddp.c
@@ -3569,11 +3569,11 @@ EXPORT CONST VECTOR_CC vdouble xerfc_u15(vdouble a) {
 // Sleef_cinz_sincospid2_u05sse2) by rename*.h.
 
 #ifdef ENABLE_ALIAS
-#define DALIAS_vd_vd(FUNC) EXPORT CONST VECTOR_CC vdouble y ## FUNC(vdouble) __attribute__((alias( stringify(x ## FUNC) )));
-#define DALIAS_vd2_vd(FUNC) EXPORT CONST VECTOR_CC vdouble2 y ## FUNC(vdouble) __attribute__((alias( stringify(x ## FUNC) )));
-#define DALIAS_vi_vd(FUNC) EXPORT CONST VECTOR_CC vint y ## FUNC(vdouble) __attribute__((alias( stringify(x ## FUNC) )));
-#define DALIAS_vd_vd_vd(FUNC) EXPORT CONST VECTOR_CC vdouble y ## FUNC(vdouble, vdouble) __attribute__((alias( stringify(x ## FUNC) )));
-#define DALIAS_vd_vd_vd_vd(FUNC) EXPORT CONST VECTOR_CC vdouble y ## FUNC(vdouble, vdouble, vdouble) __attribute__((alias( stringify(x ## FUNC) )));
+#define DALIAS_vd_vd(FUNC) EXPORT CONST VECTOR_CC vdouble y ## FUNC(vdouble) __attribute__((alias("\01" stringify(x ## FUNC) SUFFIX_D1)));
+#define DALIAS_vd2_vd(FUNC) EXPORT CONST VECTOR_CC vdouble2 y ## FUNC(vdouble) __attribute__((alias("\01" stringify(x ## FUNC) SUFFIX_D1)));
+#define DALIAS_vi_vd(FUNC) EXPORT CONST VECTOR_CC vint y ## FUNC(vdouble) __attribute__((alias("\01" stringify(x ## FUNC) SUFFIX_D1)));
+#define DALIAS_vd_vd_vd(FUNC) EXPORT CONST VECTOR_CC vdouble y ## FUNC(vdouble, vdouble) __attribute__((alias("\01" stringify(x ## FUNC) SUFFIX_D2)));
+#define DALIAS_vd_vd_vd_vd(FUNC) EXPORT CONST VECTOR_CC vdouble y ## FUNC(vdouble, vdouble, vdouble) __attribute__((alias("\01" stringify(x ## FUNC) SUFFIX_D3)));
 #else
 #define DALIAS_vd_vd(FUNC) EXPORT CONST VECTOR_CC vdouble y ## FUNC(vdouble d) { return x ## FUNC (d); }
 #define DALIAS_vd2_vd(FUNC) EXPORT CONST VECTOR_CC vdouble2 y ## FUNC(vdouble d) { return x ## FUNC (d); }
diff --git a/src/libm/sleefsimdsp.c b/src/libm/sleefsimdsp.c
index 9e1faa2..a3f4f96 100644
--- a/src/libm/sleefsimdsp.c
+++ b/src/libm/sleefsimdsp.c
@@ -3517,10 +3517,10 @@ EXPORT CONST VECTOR_CC vfloat xerfcf_u15(vfloat a) {
 // See sleefsimddp.c for explanation of these macros
 
 #ifdef ENABLE_ALIAS
-#define DALIAS_vf_vf(FUNC) EXPORT CONST VECTOR_CC vfloat y ## FUNC(vfloat) __attribute__((alias( stringify(x ## FUNC) )));
-#define DALIAS_vf2_vf(FUNC) EXPORT CONST VECTOR_CC vfloat2 y ## FUNC(vfloat) __attribute__((alias( stringify(x ## FUNC) )));
-#define DALIAS_vf_vf_vf(FUNC) EXPORT CONST VECTOR_CC vfloat y ## FUNC(vfloat, vfloat) __attribute__((alias( stringify(x ## FUNC) )));
-#define DALIAS_vf_vf_vf_vf(FUNC) EXPORT CONST VECTOR_CC vfloat y ## FUNC(vfloat, vfloat, vfloat) __attribute__((alias( stringify(x ## FUNC) )));
+#define DALIAS_vf_vf(FUNC) EXPORT CONST VECTOR_CC vfloat y ## FUNC(vfloat) __attribute__((alias("\01" stringify(x ## FUNC) SUFFIX_F1)));
+#define DALIAS_vf2_vf(FUNC) EXPORT CONST VECTOR_CC vfloat2 y ## FUNC(vfloat) __attribute__((alias("\01" stringify(x ## FUNC) SUFFIX_F1)));
+#define DALIAS_vf_vf_vf(FUNC) EXPORT CONST VECTOR_CC vfloat y ## FUNC(vfloat, vfloat) __attribute__((alias("\01" stringify(x ## FUNC) SUFFIX_F2)));
+#define DALIAS_vf_vf_vf_vf(FUNC) EXPORT CONST VECTOR_CC vfloat y ## FUNC(vfloat, vfloat, vfloat) __attribute__((alias("\01" stringify(x ## FUNC) SUFFIX_F3)));
 #else
 #define DALIAS_vf_vf(FUNC) EXPORT CONST VECTOR_CC vfloat y ## FUNC(vfloat d) { return x ## FUNC (d); }
 #define DALIAS_vf2_vf(FUNC) EXPORT CONST VECTOR_CC vfloat2 y ## FUNC(vfloat d) { return x ## FUNC (d); }
-- 
2.32.0

